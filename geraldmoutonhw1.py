# -*- coding: utf-8 -*-
"""GeraldMoutonHW1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1spQ_lV8QWcpdzDqXXTZd6oCjW4c66kM-

Homework 1
---
**Due Nov. 5 by end of the day.**

Do all your work on this notebook. Submit your homework by uploading the notebook file to moodle. Your submission notebook should contain:

- Code
- Output from running your code (printouts and plots)
- Answer to any questions or any comments (type in a markdown cell)

***
"""

# Commented out IPython magic to ensure Python compatibility.
# %pylab inline

"""**Task 1**: load the data in the [wines.csv](https://drive.google.com/open?id=1QrQ5Qqr-w4Qx-WPToDHrvFxM9iyS7O1N) data file into a numpy array.
(The following code reads the wines.csv into a Pandas dataframe. Your task is to convert the dataframe to a numpy array.) Your array should contain the data only. The header should be omitted.
"""

import pandas as pd
url = 'https://drive.google.com/uc?export=download&id=1QrQ5Qqr-w4Qx-WPToDHrvFxM9iyS7O1N'
df = pd.read_csv(url)

df.head(10)

data = df.to_numpy()

"""**Task 2**: 
- Calculate and print the average quality measure over all the wines
- Find and print the maximum level of residual sugar and minimum level of fixed acidity
"""

print(np.mean(data[:, 11]))
print(np.max(data[:, 3]))
print(np.min(data[:, 0]))

"""**Task 3:**

- Use LinearRegression from sklearn.linear_model to build and train a linear model that predicts the wine 'quality' from the wine 'volatile acidity' value. 

- Use scatter plot to plot the points (x, y) where x is volatile acidity and y is quality. Your linear model represents a line in such x-y space. Plot this line on top of the scatter plot (i.e., having both the scatter plot and the line plot on the same figure).
"""

x = data[:, 1]
y = data[:, 11]

from sklearn.linear_model import LinearRegression
model = LinearRegression(fit_intercept=True)
model.fit(x[:, None], y)

yp = model.predict(x[:, None])
print('mse =', np.mean((yp-y)**2))

scatter(x, y)
xfit = np.linspace(0, 2, 30)
yfit = model.predict(xfit[:, None])
plot(xfit, yfit, 'r')

"""**Task 4:**

- Use LinearRegression to build and train a linear model that predicts the wine 'quality' from all the other wine property values. (Naturally, your model should not use wine 'quality' as an input to predict wine 'quality'. The prediction should be based on all OTHER values.)

- For each wine, make a prediction using your model. You also have the true wine quality value. Calculate the squared error (SE), i.e., squared difference between your prediction and the true value. Average the SE among all wines to obtain the mean squared error (MSE)

- Calculate MSE for the linear model from task 3 that makes prediction using only the 'volatile acidity' value. Compare the MSE between the two models. Which one is better?
"""

x = data[:, :11]
y = data[:, 11]

model2 = LinearRegression(fit_intercept=True)
model2.fit(x, y)
yp = model2.predict(x)
print('mse =', np.mean((yp-y)**2))