# -*- coding: utf-8 -*-
"""GMlab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ss9O-LxxjhYrZhgDBMNep0f2sCGVMTSm

### Problem 1

Write code to add 'Mark' to the user list and 'mark@yahoo.com' to the email list
"""

users = ['Mike', 'Jeff', 'Mary', 'Bob', 'Alice']
emails = ['mike@lsu.edu', 'jeff@gmail.com', 'mary@lsu.edu', 'bob@yahoo.com', 'alice@lsu.edu']
users.append("Mark")
emails.append('mark@yahoo.com')

"""Modify and complete the following code. For each user and his/her correpsonding email address, compose a message such that in the message, the email address shows after 'To:' and the name of the user shows after 'Hey'. Your code should print all the messages. (You can use a loop.)"""

message = """To: %s

Hey %s,

How is the weather?
"""

for n, e in zip(users, emails):
    print(message % (e, n))

"""### Problem 2

Implement a function. Given a string L, the function should return a string that is the concatenation of L and the reverse of L. For example, if L = 'cloud', the return should be 'cloudduolc'.
"""

def string_rconc(L):
    return L + L[-1::-1]

L = 'abcd'
print(string_rconc(L))

def backw(s):
  return s+ s[::-1]
s='abcd'
backw(s)

"""### Problem 3

Implement insertion sort as a function. It takes a list of numbers as input and output the sorted list.
"""

def insertion_sort(L):
    N = len(L)
    for i in range(1, N):
        j = i
        while j>0 and L[j] < L[j-1]:
            t = L[j]
            L[j] = L[j-1]
            L[j-1] = t
            j = j-1
    return L

"""Test your implementation on the following example list:"""

l1 = [3, 15, 2, 8, 10, 7]
import numpy as np
l2 = np.random.permutation(30).tolist()
print(l1)
print(l2)

print(insertion_sort(l1))
print(insertion_sort(l2))